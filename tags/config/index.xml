<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>config on ggdG:wq!</title><link>https://ggdg.tkan.dev/tags/config/</link><description>Recent content in config on ggdG:wq!</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sun, 25 Oct 2020 20:37:39 +0900</lastBuildDate><atom:link href="https://ggdg.tkan.dev/tags/config/index.xml" rel="self" type="application/rss+xml"/><item><title>Gitでマルチバイト文字列がエスケープされる対策</title><link>https://ggdg.tkan.dev/post/how-to-avoid-escaping-multi-byte-strings-in-git/</link><pubDate>Sun, 25 Oct 2020 20:37:39 +0900</pubDate><guid>https://ggdg.tkan.dev/post/how-to-avoid-escaping-multi-byte-strings-in-git/</guid><description>デフォルトだとGitでマルチバイト文字列がエスケープされるのでその対策
どうすればいいのか？ core.quotepath オプションを false にする
下記コマンドを実行する
git config --global core.quotepath false またはgitconfigに下記記載する
[core] quotepath = false core.quotepath is なんのオプション このオプションがtrue(デフォルト設定)になっていると、マルチバイト文字列がCのエスケープ方法と同じようにエスケープされる。
UTF-8の&amp;quot;μ&amp;quot;を例にすると、
&amp;ldquo;μ&amp;quot;はhex codeで&amp;quot;0xC2 0xB5&amp;quot;なので、これを10進数にして&amp;rdquo;\302\265&amp;quot;にエスケープされる。
日本語文字列も同じ要領でエスケープされるので、日本語をファイル名に含むファイルをGit管理するときは false にしたほうが良い。
参考資料 Git - git-config Documentation https://git-scm.com/docs/git-config#Documentation/git-config.txt-corequotePath</description></item><item><title>Vimの設定整理した(2020年版)</title><link>https://ggdg.tkan.dev/post/vim-settings-in-2020/</link><pubDate>Thu, 15 Oct 2020 00:55:32 +0900</pubDate><guid>https://ggdg.tkan.dev/post/vim-settings-in-2020/</guid><description>Vimの設定がごちゃごちゃしてきていたので、久々に vimrc 大掃除して使っていないプラグインを消したりキーマップを考え直したりしました。
プラグインの選定基準、キーマップの設定基準等を思い返すためにも一度まとめておきます。
私の今のvimrc
整理する上で意識したこと features=huge でコンパイルされた Vim8(&amp;gt;=8.0.1453) で動作すること Neovim のことは考えない Windows での動作は考えない 基本的に .vimrc 1ファイルを管理する features=huge でコンパイルされた Vim8(&amp;gt;=8.0.1453) で動作すること 私が開発したくなるような環境では Vim8(&amp;gt;=8.0.1453) が入っているか、容易にインストール可能なはずなので、 Vim7 以下については考慮しないようにしました。
features=huge だけだと、 +python3, +lua が入りませんが、有効化されているか確認して必要があれば有効化する等の作業が個人的に煩わしいため、切り捨てました。
Neovim のことは考えない 私はNeovimを使用していないので、そもそも検討していません。
たまに情報を追ってはいるのですが、現状「どうしても Neovim でないと駄目！」って機能が個人的には無いので乗り換える予定もないです。
Windows での動作は考えない 現在、家にも職場にも Windows 環境が無いので、検討しないことにしました。
WSL2 もあるので。
基本的に .vimrc 1ファイルを管理する 1ファイルに全部の設定を書き、プラグインのロード、プラグインの設定等のカテゴリごとに fold しています。
キーマップの割り当て 下手なマッピングをするとデフォルトの設定を上書きしてしまったり、覚えられないキーマップを設定してしまったりするため、ある程度規則性を持たせることにしました。
&amp;lt;Leader&amp;gt; キーはデフォルトの \ をそのまま使用し、プラグインのショートカット等に使用するキーとして以下の5キーを利用します。
&amp;lt;Leader&amp;gt; キー (\ キー) プラグイン用のキー。デフォルトでは何も割り当てられていないので自由に使える。
他のキーに変えたりはせず、そのまま \ をプレフィックスキーとして使用します。
&amp;lt;Enter&amp;gt; キー デフォルトだと &amp;ldquo;カーソルを N 行下の先頭の CHAR へ移動するキー。&amp;quot;(Nj&amp;lt;C-^&amp;gt;と同等のハズ)</description></item><item><title>Commandキーをtmuxのプレフィックスキーとして使う on Iterm2</title><link>https://ggdg.tkan.dev/post/use-command-key-as-tmux-prefix-on-iterm2/</link><pubDate>Mon, 11 May 2020 04:50:09 +0900</pubDate><guid>https://ggdg.tkan.dev/post/use-command-key-as-tmux-prefix-on-iterm2/</guid><description>tmuxのプレフィックスキーに最適なキーを探して数年が経ちました。
Vimのキーマップやターミナルのショートカットを考慮するとプレフィックスキーとして使える組み合わせってほぼ残って無いです。
(デフォルトのCtrl+aとか、shellでめっちゃ多用します)
なので色々な組み合わせを試してきたんですが、最近MacだったらCommandキーをプレフィックスキーとして使えば良いのでは？
と考えて設定してみたら結構いい感じです。
Commandキーをプレフィックスキーとして使うメリットとしては
押しやすい位置にある ターミナルで動くツール(vim, bash, 他CLIツール類)とショートカットでバッティングすることが無い(多分) とかが挙がります。
親指で押せる位置にあるというのは、ターミナルで生活する者としては結構重要です。
小指とかで押すCtrl等をプレフィックスキーとして使用すると小指が死んでしまいます。
Commandキー単押しでプレフィックスキーとして動作させることも可能ですし、 Commandキー + ' を tmuxのpane分割キーとして設定すること等も可能です。 (これも結構メリット)
前提 下記環境で動作確認を行っています。 macOS Catalina バージョン 10.15.5 iTerm2 Build 3.3.11 tmux 3.0a 設定方法 Iterm2にはキーボードショートカットを自分で登録する機能が最初からついてます。
ショートカットを入力した際に色々なアクション(スクロールとかコピー等)を実行できるのですが、そんなアクションの中に &amp;ldquo;Send Hex Code&amp;rdquo; というアクションがあります。その名の通りショートカットを入力した際にASCIIコードを送信してくれる機能です。
こいつを利用して、Commandキーを入力した際にtmuxのプレフィックスキーとして設定したキーのASCIIコードを送信してもらいます。
どのキーがASCIIコードの16進数で何に該当するのかは下記サイトとかみると分かります。
ＡＳＣＩＩコード表: https://ja.wikipedia.org/wiki/ASCII
tmux側の設定 実はtmuxのprefix設定が何でも良いわけじゃないです。(ここが若干デメリット)
tmux的には Ctrl-&amp;lt;Space&amp;gt; をプレフィックスキーとして使うことが出来るのですが、
上記 &amp;ldquo;send Hex Code&amp;rdquo; の機能としては上記ASCIIコード表に載っているような文字もしくは制御文字しか対応していません。
なので普段使わなさそうな制御文字をプレフィックスキーとして利用します。
ASCIIコードの制御文字とその説明はWikipediaみると概要は分かるかと思います。
Wikipedia 制御文字: https://ja.wikipedia.org/wiki/%E5%88%B6%E5%BE%A1%E6%96%87%E5%AD%97
私は Ctrl + \ をtmuxのプレフィックスキーとして設定しました。 (制御文字としては File Separator だそうです。)</description></item><item><title>Using the Command key as a prefix key for tmux in Iterm2</title><link>https://ggdg.tkan.dev/post/use-command-key-as-tmux-prefix-on-iterm2-en/</link><pubDate>Mon, 11 May 2020 04:50:09 +0900</pubDate><guid>https://ggdg.tkan.dev/post/use-command-key-as-tmux-prefix-on-iterm2-en/</guid><description>I&amp;rsquo;ve been looking for the best key for a tmux prefix key for several years now.
Considering Vim&amp;rsquo;s keymap and terminal shortcuts, it&amp;rsquo;s a prefix key. There are almost no usable combinations left.
(Ctrl+a, which is set as the default prefix key on tmux, is used for bash It&amp;rsquo;s covered with a shell.)
So I&amp;rsquo;ve been experimenting with various combinations, and recently, if I were on a Mac, I&amp;rsquo;d use the Command key.</description></item></channel></rss>